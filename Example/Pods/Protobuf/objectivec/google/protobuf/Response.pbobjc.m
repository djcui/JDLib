// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Response.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Response.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ResponseRoot

@implementation ResponseRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ResponseRoot_chatMessage),
        .extendedClass = GPBStringifySymbol(Response),
        .messageOrGroupClassName = GPBStringifySymbol(ChatMessageResp),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 100,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ResponseRoot_createConversation),
        .extendedClass = GPBStringifySymbol(Response),
        .messageOrGroupClassName = GPBStringifySymbol(CreateConversationResp),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 101,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ResponseRoot_heartbeat),
        .extendedClass = GPBStringifySymbol(Response),
        .messageOrGroupClassName = GPBStringifySymbol(HeartbeatResp),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 102,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ResponseRoot_chatMessageList),
        .extendedClass = GPBStringifySymbol(Response),
        .messageOrGroupClassName = GPBStringifySymbol(ChatMessageListResp),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 103,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ResponseRoot_msgStatus),
        .extendedClass = GPBStringifySymbol(Response),
        .messageOrGroupClassName = GPBStringifySymbol(MsgStatusResp),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 104,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(ResponseRoot_imgStatus),
        .extendedClass = GPBStringifySymbol(Response),
        .messageOrGroupClassName = GPBStringifySymbol(ImgStatusResp),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 105,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
    };
    for (size_t i = 0; i < sizeof(descriptions) / sizeof(descriptions[0]); ++i) {
      GPBExtensionDescriptor *extension =
          [[GPBExtensionDescriptor alloc] initWithExtensionDescription:&descriptions[i]];
      [registry addExtension:extension];
      [self globallyRegisterExtension:extension];
      [extension release];
    }
  }
  return registry;
}

@end

#pragma mark - ResponseRoot_FileDescriptor

static GPBFileDescriptor *ResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"netty"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Response

@implementation Response

@dynamic hasProtocol, protocol;
@dynamic hasStatus, status;
@dynamic hasCode, code;

typedef struct Response__storage_ {
  uint32_t _has_storage_[1];
  int32_t protocol;
  int32_t status;
  NSString *code;
} Response__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "protocol",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Protocol,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Response__storage_, protocol),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Response__storage_, status),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = Response_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Response__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Response class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Response__storage_)
                                         flags:0];
    static const GPBExtensionRange ranges[] = {
      { .start = 100, .end = 200 },
    };
    [localDescriptor setupExtensionRanges:ranges
                                    count:(uint32_t)(sizeof(ranges) / sizeof(GPBExtensionRange))];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatMessage

@implementation ChatMessage

@dynamic hasType, type;
@dynamic hasText, text;
@dynamic hasFlag, flag;
@dynamic hasCreateAt, createAt;

typedef struct ChatMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t type;
  int32_t flag;
  NSString *text;
  NSString *createAt;
} ChatMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, type),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, text),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_Flag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, flag),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "createAt",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessage_FieldNumber_CreateAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatMessage__storage_, createAt),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessage class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessage__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatMessageResp

@implementation ChatMessageResp

@dynamic hasMessage, message;

typedef struct ChatMessageResp__storage_ {
  uint32_t _has_storage_[1];
  ChatMessage *message;
} ChatMessageResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatMessage),
        .number = ChatMessageResp_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessageResp__storage_, message),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessageResp class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessageResp__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MsgStatusResp

@implementation MsgStatusResp

@dynamic hasStatus, status;
@dynamic hasConvid, convid;
@dynamic hasRequestId, requestId;

typedef struct MsgStatusResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *convid;
  NSString *requestId;
} MsgStatusResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = MsgStatusResp_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MsgStatusResp__storage_, status),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "convid",
        .dataTypeSpecific.className = NULL,
        .number = MsgStatusResp_FieldNumber_Convid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MsgStatusResp__storage_, convid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = MsgStatusResp_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MsgStatusResp__storage_, requestId),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MsgStatusResp class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MsgStatusResp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ImgStatusResp

@implementation ImgStatusResp

@dynamic hasStatus, status;
@dynamic hasImgURL, imgURL;
@dynamic hasConvid, convid;
@dynamic hasRequestId, requestId;

typedef struct ImgStatusResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t status;
  NSString *imgURL;
  NSString *convid;
  NSString *requestId;
} ImgStatusResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.className = NULL,
        .number = ImgStatusResp_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ImgStatusResp__storage_, status),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "imgURL",
        .dataTypeSpecific.className = NULL,
        .number = ImgStatusResp_FieldNumber_ImgURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ImgStatusResp__storage_, imgURL),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "convid",
        .dataTypeSpecific.className = NULL,
        .number = ImgStatusResp_FieldNumber_Convid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ImgStatusResp__storage_, convid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = ImgStatusResp_FieldNumber_RequestId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ImgStatusResp__storage_, requestId),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ImgStatusResp class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ImgStatusResp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\004!!\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateConversationResp

@implementation CreateConversationResp

@dynamic hasCovnid, covnid;
@dynamic hasInstallationid, installationid;
@dynamic hasRequestId, requestId;

typedef struct CreateConversationResp__storage_ {
  uint32_t _has_storage_[1];
  NSString *covnid;
  NSString *installationid;
  NSString *requestId;
} CreateConversationResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "covnid",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationResp_FieldNumber_Covnid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateConversationResp__storage_, covnid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "installationid",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationResp_FieldNumber_Installationid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateConversationResp__storage_, installationid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationResp_FieldNumber_RequestId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateConversationResp__storage_, requestId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateConversationResp class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateConversationResp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HeartbeatResp

@implementation HeartbeatResp

@dynamic hasSessionCount, sessionCount;

typedef struct HeartbeatResp__storage_ {
  uint32_t _has_storage_[1];
  int32_t sessionCount;
} HeartbeatResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sessionCount",
        .dataTypeSpecific.className = NULL,
        .number = HeartbeatResp_FieldNumber_SessionCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeartbeatResp__storage_, sessionCount),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeartbeatResp class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeartbeatResp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatMessageListResp

@implementation ChatMessageListResp

@dynamic hasInstallationid, installationid;
@dynamic chatmessageArray, chatmessageArray_Count;
@dynamic hasRequestId, requestId;

typedef struct ChatMessageListResp__storage_ {
  uint32_t _has_storage_[1];
  NSString *installationid;
  NSMutableArray *chatmessageArray;
  NSString *requestId;
} ChatMessageListResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "installationid",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageListResp_FieldNumber_Installationid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessageListResp__storage_, installationid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chatmessageArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ChatMessage),
        .number = ChatMessageListResp_FieldNumber_ChatmessageArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ChatMessageListResp__storage_, chatmessageArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageListResp_FieldNumber_RequestId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessageListResp__storage_, requestId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessageListResp class]
                                     rootClass:[ResponseRoot class]
                                          file:ResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessageListResp__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
