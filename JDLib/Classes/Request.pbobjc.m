// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Request.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RequestRoot

@implementation RequestRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    static GPBExtensionDescription descriptions[] = {
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(RequestRoot_chatMessage),
        .extendedClass = GPBStringifySymbol(Request),
        .messageOrGroupClassName = GPBStringifySymbol(ChatMessageReq),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 100,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(RequestRoot_chatImage),
        .extendedClass = GPBStringifySymbol(Request),
        .messageOrGroupClassName = GPBStringifySymbol(ChatImageReq),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 101,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(RequestRoot_createConversation),
        .extendedClass = GPBStringifySymbol(Request),
        .messageOrGroupClassName = GPBStringifySymbol(CreateConversationReq),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 102,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
      {
        .defaultValue.valueMessage = nil,
        .singletonName = GPBStringifySymbol(RequestRoot_chatMessageList),
        .extendedClass = GPBStringifySymbol(Request),
        .messageOrGroupClassName = GPBStringifySymbol(ChatMessageListReq),
        .enumDescriptorFunc = NULL,
        .fieldNumber = 103,
        .dataType = GPBDataTypeMessage,
        .options = 0,
      },
    };
    for (size_t i = 0; i < sizeof(descriptions) / sizeof(descriptions[0]); ++i) {
      GPBExtensionDescriptor *extension =
          [[GPBExtensionDescriptor alloc] initWithExtensionDescription:&descriptions[i]];
      [registry addExtension:extension];
      [self globallyRegisterExtension:extension];
      [extension release];
    }
  }
  return registry;
}

@end

#pragma mark - RequestRoot_FileDescriptor

static GPBFileDescriptor *RequestRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Request

@implementation Request

@dynamic hasCmd, cmd;
@dynamic hasDct, dct;

typedef struct Request__storage_ {
  uint32_t _has_storage_[1];
  int32_t cmd;
  int32_t dct;
} Request__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmd",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Cmd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Request__storage_, cmd),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dct",
        .dataTypeSpecific.className = NULL,
        .number = Request_FieldNumber_Dct,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Request__storage_, dct),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Request class]
                                     rootClass:[RequestRoot class]
                                          file:RequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Request__storage_)
                                         flags:0];
    static const GPBExtensionRange ranges[] = {
      { .start = 100, .end = 201 },
    };
    [localDescriptor setupExtensionRanges:ranges
                                    count:(uint32_t)(sizeof(ranges) / sizeof(GPBExtensionRange))];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateConversationReq

@implementation CreateConversationReq

@dynamic hasClientid, clientid;
@dynamic hasPuid, puid;
@dynamic hasDeviceType, deviceType;
@dynamic hasAttributes, attributes;
@dynamic hasRequestId, requestId;

typedef struct CreateConversationReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *clientid;
  NSString *puid;
  NSString *deviceType;
  NSString *attributes;
  NSString *requestId;
} CreateConversationReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "clientid",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationReq_FieldNumber_Clientid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateConversationReq__storage_, clientid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "puid",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationReq_FieldNumber_Puid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateConversationReq__storage_, puid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationReq_FieldNumber_DeviceType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateConversationReq__storage_, deviceType),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attributes",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationReq_FieldNumber_Attributes,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateConversationReq__storage_, attributes),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = CreateConversationReq_FieldNumber_RequestId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateConversationReq__storage_, requestId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateConversationReq class]
                                     rootClass:[RequestRoot class]
                                          file:RequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateConversationReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\n\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatMessageReq

@implementation ChatMessageReq

@dynamic hasCovnid, covnid;
@dynamic hasMessage, message;
@dynamic hasFlag, flag;
@dynamic hasRequestId, requestId;

typedef struct ChatMessageReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t flag;
  NSString *covnid;
  NSString *message;
  NSString *requestId;
} ChatMessageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "covnid",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageReq_FieldNumber_Covnid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessageReq__storage_, covnid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageReq_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessageReq__storage_, message),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flag",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageReq_FieldNumber_Flag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMessageReq__storage_, flag),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageReq_FieldNumber_RequestId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatMessageReq__storage_, requestId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessageReq class]
                                     rootClass:[RequestRoot class]
                                          file:RequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessageReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatImageReq

@implementation ChatImageReq

@dynamic hasCovnid, covnid;
@dynamic hasRolename, rolename;
@dynamic hasImage, image;
@dynamic hasRequestId, requestId;

typedef struct ChatImageReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *covnid;
  NSString *rolename;
  NSData *image;
  NSString *requestId;
} ChatImageReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "covnid",
        .dataTypeSpecific.className = NULL,
        .number = ChatImageReq_FieldNumber_Covnid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatImageReq__storage_, covnid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "rolename",
        .dataTypeSpecific.className = NULL,
        .number = ChatImageReq_FieldNumber_Rolename,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatImageReq__storage_, rolename),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = NULL,
        .number = ChatImageReq_FieldNumber_Image,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatImageReq__storage_, image),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = ChatImageReq_FieldNumber_RequestId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatImageReq__storage_, requestId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatImageReq class]
                                     rootClass:[RequestRoot class]
                                          file:RequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatImageReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChatMessageListReq

@implementation ChatMessageListReq

@dynamic hasConvid, convid;
@dynamic hasClientid, clientid;
@dynamic hasPuid, puid;
@dynamic hasDeviceType, deviceType;
@dynamic hasRequestId, requestId;

typedef struct ChatMessageListReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *convid;
  NSString *clientid;
  NSString *puid;
  NSString *deviceType;
  NSString *requestId;
} ChatMessageListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "convid",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageListReq_FieldNumber_Convid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ChatMessageListReq__storage_, convid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clientid",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageListReq_FieldNumber_Clientid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ChatMessageListReq__storage_, clientid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "puid",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageListReq_FieldNumber_Puid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ChatMessageListReq__storage_, puid),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageListReq_FieldNumber_DeviceType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ChatMessageListReq__storage_, deviceType),
        .flags = GPBFieldRequired | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestId",
        .dataTypeSpecific.className = NULL,
        .number = ChatMessageListReq_FieldNumber_RequestId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ChatMessageListReq__storage_, requestId),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChatMessageListReq class]
                                     rootClass:[RequestRoot class]
                                          file:RequestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChatMessageListReq__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\004\n\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
